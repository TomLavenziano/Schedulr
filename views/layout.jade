doctype html
html
  head
    if locals.title
      title= title
    else
      title Schedulr

    // Viewport mobile tag for sensible mobile support
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible", content="IE-edge,chrome=1")
    meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

    //-
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus

    // STYLES
    link(rel="stylesheet", href="/styles/fullcalendar.css")
    link(rel="stylesheet", href="/styles/importer.css")
    link(rel="stylesheet", href="/styles/jquery.timepicker.css")
    link(rel="stylesheet", href="/styles/layout.css")
    link(rel="stylesheet", href="/styles/materialize.css")
    // STYLES END
    link(rel="stylesheet", href="https://fonts.googleapis.com/icon?family=Material+Icons")

    block styles
  body
    //Navigation header
    html
  head
  body
    .navbar-fixed
      nav
        .nav-wrapper.light-blue.darken-2.nav-padding
          a.brand-logo(href='/')
            i.material-icons cloud
            | Schedulr
          ul.right.hide-on-med-and-down
            li
              a(href='/schedule')
                i.material-icons more_vert
            li
              a(href='/profile')
                i.material-icons search
            li
              a(href='/login')
                i.material-icons view_module
            li
              a(href='/settings')
                i.material-icons refresh
    block body

    //-
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).

      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.

    // TEMPLATES
    
    // TEMPLATES END

    //-
      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    // SCRIPTS
    script(src="/js/dependencies/sails.io.js")
    script(src="/js/dependencies/Gruntfile.js")
    script(src="/js/dependencies/jonthornton-Datepair.js-f4d28ba/dist/datepair.js")
    script(src="/js/dependencies/jonthornton-Datepair.js-f4d28ba/dist/datepair.min.js")
    script(src="/js/dependencies/jonthornton-Datepair.js-f4d28ba/dist/jquery.datepair.js")
    script(src="/js/dependencies/jonthornton-Datepair.js-f4d28ba/dist/jquery.datepair.min.js")
    script(src="/js/dependencies/jquery-ui-1.12.1.custom/external/jquery/jquery.js")
    script(src="/js/dependencies/jquery-ui-1.12.1.custom/jquery-ui.js")
    script(src="/js/dependencies/jquery-ui-1.12.1.custom/jquery-ui.min.js")
    script(src="/js/dependencies/jquery.leanModal.min.js")
    script(src="/js/dependencies/jquery.min.js")
    script(src="/js/dependencies/jquery.timepicker.js")
    script(src="/js/dependencies/materialize.min.js")
    script(src="/js/dependencies/moment.js")
    script(src="/js/fullcalendar.js")
    script(src="/js/modalForm.js")
    script(src="/js/schedule.js")
    // SCRIPTS END
